<NML = 1.0>

<Shader =
	<Name = "core::linearlight">

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size,
							inverse_projection_2d,
							display_buffer_ratio;

		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color,
							specular_color,
							direction_view_space;

		uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;

		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	norm_dpth = texture2D(gbuffer0, UV);
			vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + view_depth_offset);

			// Normal in viewmodel space.
			vec3	normal = norm_dpth.xyz;

			// Light diffuse contribution.
			float	idiff = max(-dot(direction_view_space, normal), 0.0);

			// Light specular contribution.
			vec4	spec_glos = texture2D(gbuffer2, UV);
			vec3	e = reflect(normalize(frag_viewpos), normal);
			float	ispec = pow(max(-dot(direction_view_space, normalize(e)), 0.0), spec_glos.w * 96.0);

			// Full contribution.
			vec4	diff_bake = texture2D(gbuffer1, UV);
			gl_FragColor = vec4(diff_bake.w * (diff_bake.rgb * diffuse_color * idiff + spec_glos.rgb * specular_color * ispec), 1.0);
		}
	">
>

<Shader =
	<Name = "core::linearlight_pssm">

	<Vertex = "
		varying	vec3		forward;
		void	main()
		{
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			forward = (gl_ModelViewMatrix * gl_Vertex).xyz;
		}
	">

	<Pixel = "
		varying	vec3		forward;

		uniform	vec2		inverse_buffer_size,
							inverse_projection_2d,
							display_buffer_ratio;

		uniform	float		view_depth_offset,
							inverse_shadowmap_size,
							shadow_bias;

		uniform vec3		diffuse_color,
							specular_color,
							direction_view_space;

		uniform	sampler2D	gbuffer0, gbuffer1, gbuffer2;
		uniform	sampler2DShadow	pssm_0, pssm_1, pssm_2, pssm_3, pssm_4, pssm_5;

		uniform	mat4		pssm_0_projection_matrix,
							pssm_1_projection_matrix,
							pssm_2_projection_matrix,
							pssm_3_projection_matrix,
							pssm_4_projection_matrix,
							pssm_5_projection_matrix;
		uniform	float		pssm_0_slice_distance,
							pssm_1_slice_distance,
							pssm_2_slice_distance,
							pssm_3_slice_distance,
							pssm_4_slice_distance,
							pssm_5_slice_distance;

		//-----------------------------------------------------------
		float	EvaluatePCF(sampler2DShadow pssm, vec3 fvp, mat4 pjm)
		{
			vec4	flp = pjm * vec4(fvp, 1.0);
			vec3	pjb = ((flp.xyz / flp.w) + 1.0) * 0.5;

			// 3x3 PCF TAP.
			float	pcf_tap = 0.0;
			for (float v = 0.0; v < 3.0; ++v)
				for (float u = 0.0; u < 3.0; ++u)
					pcf_tap += shadow2D(pssm, pjb + vec3(u, v, 0.0) * inverse_shadowmap_size).r;

			return pcf_tap / 9.0;
//			return shadow2D(pssm, pjb).r;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	norm_dpth = texture2D(gbuffer0, UV);
			vec3	frag_viewpos = (forward / forward.z) * (norm_dpth.w + view_depth_offset - shadow_bias);

			// Evaluate PCF on the shadow map corresponding to this fragment slice.
			float	pcf = 1.0;

					if	(frag_viewpos.z < pssm_0_slice_distance)
				pcf = EvaluatePCF(pssm_0, frag_viewpos, pssm_0_projection_matrix);
			else	if	(frag_viewpos.z < pssm_1_slice_distance)
				pcf = EvaluatePCF(pssm_1, frag_viewpos, pssm_1_projection_matrix);
			else	if	(frag_viewpos.z < pssm_2_slice_distance)
				pcf = EvaluatePCF(pssm_2, frag_viewpos, pssm_2_projection_matrix);
			else	if	(frag_viewpos.z < pssm_3_slice_distance)
				pcf = EvaluatePCF(pssm_3, frag_viewpos, pssm_3_projection_matrix);
			else	if	(frag_viewpos.z < pssm_4_slice_distance)
				pcf = EvaluatePCF(pssm_4, frag_viewpos, pssm_4_projection_matrix);
			else	if	(frag_viewpos.z < pssm_5_slice_distance)
			{
				pcf = EvaluatePCF(pssm_5, frag_viewpos, pssm_5_projection_matrix);

				float	ramp_k = clamp((frag_viewpos.z - (pssm_5_slice_distance - 10.0)) / 10.0, 0.0, 1.0);
				pcf = pcf * (1.0 - ramp_k) + ramp_k;
			}

			if	(pcf > 0.0)
			{
				frag_viewpos = (forward / forward.z) * (norm_dpth.w + view_depth_offset);

				// Normal in viewmodel space.
				vec3	normal = norm_dpth.xyz;

				// Light diffuse contribution.
				float	idiff = max(-dot(direction_view_space, normal), 0.0);

				// Light specular contribution.
				vec4	spec_glos = texture2D(gbuffer2, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);
				float	ispec = pow(max(-dot(direction_view_space, normalize(e)), 0.0), spec_glos.w * 96.0);

				// Full contribution.
				vec4	diff_bake = texture2D(gbuffer1, UV);
				gl_FragColor = vec4(diff_bake.w *(diff_bake.rgb * diffuse_color * idiff + spec_glos.rgb * specular_color * ispec), 1.0) * pcf;
			}
			else	gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
		}
	">
>
