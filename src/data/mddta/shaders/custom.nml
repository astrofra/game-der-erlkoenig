<NML = 1.0>

<Shader =
	<Name = "core::car_body_hack">

	<Input = <Id = "@color_uv"> <Var = "0">>
	<Input = <Id = "@color_texture"> <Var = "tex0">>
	<Input = <Id = "@specular_uv"> <Var = "1">>
	<Input = <Id = "@specular_texture"> <Var = "tex1">>
	<Input = <Id = "@normal_uv"> <Var = "2">>
	<Input = <Id = "@normal_texture"> <Var = "tex2">>
	<Input = <Id = "@reflection_texture"> <Var = "tex3">>

	<Vertex = "
		varying	vec2		UV0;
		varying	vec2		UV1;
		varying	vec2		UV2;
		varying	vec3		rgb_vtx;
		varying	vec3		frag_pos;
		void	main()
		{
			rgb_vtx = gl_Color.rgb;
			UV0 = vec2(gl_MultiTexCoord0);
			UV1 = vec2(gl_MultiTexCoord1);
			UV2 = vec2(gl_MultiTexCoord2);
			frag_pos = (gl_ModelViewMatrix * gl_Vertex).xyz;
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		#extension GL_ARB_draw_buffers: enable

		uniform	sampler2D	tex0, tex1, tex2, tex3;
		varying	vec2		UV0, UV1, UV2;

		varying vec3		frag_pos;
		varying	vec3		rgb_vtx;

		void	main()
		{
			vec4	col = texture2D(tex0, UV0);
			if	(col.a < 0.9)
				discard;

			vec3	normal = normalize(texture2D(tex2, UV2).xzy - vec3(0.5, 0.5, 0.5));		// Watch the swizzle here!
			vec3	wvnormal = gl_NormalMatrix * normal;

			// Pseudo skybox.
			vec3	skybox = texture2D(tex3, (wvnormal.xy * vec2(-0.5, 0.5)) + vec2(0.5, 0.5)).xyz;

			// Pseudo fresnel.
			vec3	view = normalize(frag_pos);
			float	ndv = clamp((1.0 - (-dot(wvnormal, view))) * 2.0, 0.0, 0.45);

			gl_FragData[0] = vec4(skybox * ndv + col.rgb * (1.0 - ndv), gl_FrontMaterial.emission.g);
			gl_FragData[1] = vec4(texture2D(tex1, UV1).rgb, gl_FrontMaterial.shininess);
			gl_FragData[2] = vec4(rgb_vtx, gl_FrontMaterial.diffuse.g);
		}
	">
>

<Shader =
	<Name = "core::car_body_hack_normal_geo">

	<Input = <Id = "@color_uv"> <Var = "0">>
	<Input = <Id = "@color_texture"> <Var = "tex0">>
	<Input = <Id = "@specular_uv"> <Var = "1">>
	<Input = <Id = "@specular_texture"> <Var = "tex1">>
	<Input = <Id = "@normal_uv"> <Var = "2">>
	<Input = <Id = "@normal_texture"> <Var = "tex2">>
	<Input = <Id = "@model_rotation_matrix"> <Var = "model_rotation_matrix">>

	<Vertex = "
		varying	vec2		UV0;
		varying	vec2		UV1;
		varying	vec3		rgb_vtx;
		varying	vec3		frag_pos;
		varying vec3		normal;
		void	main()
		{
			rgb_vtx = gl_Color.rgb;
			UV0 = vec2(gl_MultiTexCoord0);
			UV1 = vec2(gl_MultiTexCoord1);
			frag_pos = (gl_ModelViewMatrix * gl_Vertex).xyz;
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
			normal = gl_NormalMatrix * gl_Normal;
		}
	">
	<Pixel = "
		#extension GL_ARB_draw_buffers: enable

		uniform	sampler2D	tex0, tex1;
		varying	vec2		UV0, UV1;

		varying vec3		frag_pos;
		varying	vec3		rgb_vtx;
		uniform	mat3		model_rotation_matrix;

		varying vec3		normal;

		void	main()
		{
			vec4	col = texture2D(tex0, UV0);
			if	(col.a < 0.9)
				discard;

			vec3	nnormal = normalize(normal);

			// Pseudo skybox.
			vec3	wnormal = model_rotation_matrix * nnormal;
			float	skybox_k = clamp((wnormal.y - 0.2) / 0.05, 0.0, 1.0);
			vec3	skybox = vec3(0.15, 0.175, 0.2) * (1.0 - skybox_k) + vec3(0.7, 0.7, 1.0) * skybox_k;

			// Pseudo fresnel.
			vec3	wvnormal = gl_NormalMatrix * nnormal;
			vec3	view = normalize(frag_pos);

			float	ndv = clamp((1.0 - (-dot(wvnormal, view))) * 2.0, 0.0, 0.45);

			gl_FragData[0] = vec4(skybox * ndv + col.rgb, gl_FrontMaterial.emission.g);
			gl_FragData[1] = vec4(texture2D(tex1, UV1).rgb, gl_FrontMaterial.shininess);
			gl_FragData[2] = vec4(rgb_vtx, gl_FrontMaterial.diffuse.g);
		}
	">
>

<Shader =
	<Name = "core::glass_hack">

	<Input = <Id = "@color_uv"> <Var = "0">>
	<Input = <Id = "@framebuffer"> <Var = "tex0">>
	<Input = <Id = "@specular_uv"> <Var = "1">>
	<Input = <Id = "@specular_texture"> <Var = "tex1">>
	<Input = <Id = "@normal_uv"> <Var = "2">>
	<Input = <Id = "@normal_texture"> <Var = "tex2">>
	<Input = <Id = "@vertexcolor_uv"> <Var = "3">>
	<Input = <Id = "@vertexcolor_texture"> <Var = "tex3">>
	<Input = <Id = "@reflection_texture"> <Var = "tex4">>
	<Input = <Id = "@inverse_buffer_size"> <Var = "inverse_buffer_size">>
	
	<Vertex = "
		varying	vec2		UV0;
		varying	vec2		UV1;
		varying	vec2		UV2;
		varying	vec2		UV3;
		varying	vec3		rgb_vtx;
		varying	vec3		frag_pos;
		varying vec3		normal;
		void	main()
		{
			rgb_vtx = gl_Color.rgb;
			UV0 = vec2(gl_MultiTexCoord0);
			UV1 = vec2(gl_MultiTexCoord1);
			UV2 = vec2(gl_MultiTexCoord2);
			UV3 = vec2(gl_MultiTexCoord3);
			normal = gl_NormalMatrix * gl_Normal;
			frag_pos = (gl_ModelViewMatrix * gl_Vertex).xyz;
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		#extension GL_ARB_draw_buffers: enable

		uniform	sampler2D	tex0, tex1, tex2, tex3, tex4;
		uniform	vec2		inverse_buffer_size;
		varying	vec2		UV0, UV1, UV2, UV3;

		varying vec3		frag_pos;
		varying	vec3		rgb_vtx;

		varying vec3		normal;

		void	main()
		{
			vec3	_normal = normalize(texture2D(tex2, UV2).xzy - vec3(0.5, 0.5, 0.5));		// Watch the swizzle here!
			vec3	wvnormal = _normal; // gl_NormalMatrix * _normal - normal;
			
			// Ambiant Occlusion.
			vec4	col = texture2D(tex3, UV3);

			// Refraction map.
			vec2	refv = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size + wvnormal.xy * vec2(0.05, 0.05);
			col *= texture2D(tex0, refv);

			// Envmap.
			vec3	skybox = texture2D(tex4, (wvnormal.xy * vec2(-0.5, 0.5)) + vec2(0.5, 0.5)).xyz;

			// Pseudo fresnel.
			vec3	view = normalize(frag_pos);
			float	ndv = clamp((1.0 - (-dot(wvnormal, view))) * 2.0, 0.0, 0.35);

gl_FragColor = vec4(skybox * ndv + col.rgb * (1.0 - ndv), 1.0);
/*
			gl_FragData[0] = vec4(skybox * ndv + col.rgb * (1.0 - ndv), gl_FrontMaterial.emission.g);
			gl_FragData[1] = vec4(texture2D(tex1, UV1).rgb, gl_FrontMaterial.shininess);
			gl_FragData[2] = vec4(rgb_vtx, gl_FrontMaterial.diffuse.g);
*/
		}
	">
>

<Shader =
	<Name = "core::simple_glass_hack">

	<Input = <Id = "@color_uv"> <Var = "0">>
	<Input = <Id = "@framebuffer"> <Var = "tex0">>
	<Input = <Id = "@reflection_texture"> <Var = "tex1">>
	<Input = <Id = "@inverse_buffer_size"> <Var = "inverse_buffer_size">>
	
	<Vertex = "
		varying	vec2		UV0;
		varying	vec2		UV1;
		varying	vec2		UV2;
		varying	vec2		UV3;
		varying	vec3		rgb_vtx;
		varying	vec3		frag_pos;
		varying vec3		normal;
		void	main()
		{
			rgb_vtx = gl_Color.rgb;
			UV0 = vec2(gl_MultiTexCoord0);
			UV1 = vec2(gl_MultiTexCoord1);
			UV2 = vec2(gl_MultiTexCoord2);
			UV3 = vec2(gl_MultiTexCoord3);
			normal = gl_NormalMatrix * gl_Normal;
			frag_pos = (gl_ModelViewMatrix * gl_Vertex).xyz;
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">
	<Pixel = "
		#extension GL_ARB_draw_buffers: enable

		uniform	sampler2D	tex0, tex1;
		uniform	vec2		inverse_buffer_size;
		varying	vec2		UV0, UV1, UV2, UV3;

		varying vec3		frag_pos;
		varying	vec3		rgb_vtx;

		varying vec3		normal;

		void	main()
		{
			vec3	wvnormal = gl_NormalMatrix * normal;
			
			// Refraction map.
			vec2	refv = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size + ((wvnormal.xy * vec2(-0.5, 0.5)) + vec2(0.5, 0.5)) * vec2(0.005, 0.005);
			vec4	col = texture2D(tex0, refv);

			// Envmap.
			vec3	skybox = texture2D(tex1, (wvnormal.xy * vec2(-0.5, 0.5)) + vec2(0.5, 0.5)).xyz;

			// Pseudo fresnel.
			vec3	view = normalize(frag_pos);
			float	ndv = clamp((1.0 - (-dot(wvnormal, view))) * 2.0, 0.0, 0.35);

			gl_FragColor = vec4(skybox * ndv + col.rgb * (1.0 - ndv), 1.0);
		}
	">
>

<Shader =
	<Name = "core::linearlight_pattern_pssm">

	<Input = <Id = "#texture:pattern_hatching.tga, 1"> <Var = "noise_texture">>
	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>
	<Input = <Id = "@inverse_buffer_size"> <Var = "inverse_buffer_size">>

	<Vertex = "
		varying	vec3		frag_pos;
		void	main()
		{
			frag_pos = (gl_ModelViewMatrix * gl_Vertex).xyz;
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">

	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	vec2		inverse_projection_2d;
		uniform	vec2		display_buffer_ratio;
		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color;
		uniform	vec3		specular_color;
		uniform	vec3		direction_view_space;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	spec_gloss;
		uniform	sampler2D	occ_diff;
		uniform	sampler2D	noise_texture;

		uniform	sampler2D	pssm;
		uniform	mat4		pssm_0_projection_matrix;
		uniform	float		pssm_0_slice_distance;
		uniform	mat4		pssm_1_projection_matrix;
		uniform	float		pssm_1_slice_distance;
		uniform	mat4		pssm_2_projection_matrix;
		uniform	float		pssm_2_slice_distance;
		uniform	mat4		pssm_3_projection_matrix;
		uniform	float		pssm_3_slice_distance;

		//---------------------------------------------
		float	ShadowTest(float light_z, float frag_z)
		{
			//return (light_z < (frag_z - 0.0025)) ? 0.0 : 1.0;
			return (light_z > 1.001) ? (((light_z - 1.0) < (frag_z - 0.00025)) ? 0.0 : 1.0) : 1.0;
		}

		//--------------------------------------------------------------
		float	ShadowTestTapFilter0(vec2 pj_biased, vec4 frag_lightpos)
		{
			float		a = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.0) / 1024.0).r, frag_lightpos.z),
						b = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 0.0) / 1024.0).r, frag_lightpos.z),
						c = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 1.0) / 1024.0).r, frag_lightpos.z),
						d = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 1.0) / 1024.0).r, frag_lightpos.z);

			float		ku = fract(pj_biased.x * 1024.0),
						kv = fract(pj_biased.y * 1024.0);

			return (a * (1.0 - ku) + b * ku) * (1.0 - kv) + (c * (1.0 - ku) + d * ku) * kv; 
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF0(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(ShadowTestTapFilter0(pj_biased, frag_lightpos));
		}

		//--------------------------------------------------------------
		float	ShadowTestTapFilter1(vec2 pj_biased, vec4 frag_lightpos)
		{
			float		a = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.0) / 1024.0).g, frag_lightpos.z),
						b = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 0.0) / 1024.0).g, frag_lightpos.z),
						c = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 1.0) / 1024.0).g, frag_lightpos.z),
						d = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 1.0) / 1024.0).g, frag_lightpos.z);

			float		ku = fract(pj_biased.x * 1024.0),
						kv = fract(pj_biased.y * 1024.0);

			return (a * (1.0 - ku) + b * ku) * (1.0 - kv) + (c * (1.0 - ku) + d * ku) * kv; 
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF1(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(ShadowTestTapFilter1(pj_biased, frag_lightpos));
		}

		//--------------------------------------------------------------
		float	ShadowTestTapFilter2(vec2 pj_biased, vec4 frag_lightpos)
		{
			float		a = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.0) / 1024.0).b, frag_lightpos.z),
						b = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 0.0) / 1024.0).b, frag_lightpos.z),
						c = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 1.0) / 1024.0).b, frag_lightpos.z),
						d = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 1.0) / 1024.0).b, frag_lightpos.z);

			float		ku = fract(pj_biased.x * 1024.0),
						kv = fract(pj_biased.y * 1024.0);

			return (a * (1.0 - ku) + b * ku) * (1.0 - kv) + (c * (1.0 - ku) + d * ku) * kv; 
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF2(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(ShadowTestTapFilter2(pj_biased, frag_lightpos));
		}

		//--------------------------------------------------------------
		float	ShadowTestTapFilter3(vec2 pj_biased, vec4 frag_lightpos)
		{
			float		a = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 0.0) / 1024.0).a, frag_lightpos.z),
						b = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 0.0) / 1024.0).a, frag_lightpos.z),
						c = ShadowTest(texture2D(pssm, pj_biased + vec2(0.0, 1.0) / 1024.0).a, frag_lightpos.z),
						d = ShadowTest(texture2D(pssm, pj_biased + vec2(1.0, 1.0) / 1024.0).a, frag_lightpos.z);

			float		ku = fract(pj_biased.x * 1024.0),
						kv = fract(pj_biased.y * 1024.0);

			return (a * (1.0 - ku) + b * ku) * (1.0 - kv) + (c * (1.0 - ku) + d * ku) * kv; 
		}

		//-------------------------------------------------------------------
		float	EvaluatePCF3(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(ShadowTestTapFilter3(pj_biased, frag_lightpos));
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);

			// Unpack depth and compute fragment position in view space.
			vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
			vec3	frag_viewpos = svc * (dtsg.w + view_depth_offset);	// Intentional offsetting...

			// Evaluate PCF on the shadow map corresponding to this fragment slice.
			float	pcf = 1.0;

					if	(frag_viewpos.z < pssm_0_slice_distance)
						pcf = EvaluatePCF0(pssm_0_projection_matrix, frag_viewpos);

			else	if	(frag_viewpos.z < pssm_1_slice_distance)
						pcf = EvaluatePCF1(pssm_1_projection_matrix, frag_viewpos);

			else	if	(frag_viewpos.z < pssm_2_slice_distance)
						pcf = EvaluatePCF2(pssm_2_projection_matrix, frag_viewpos);

			else	if	(frag_viewpos.z < pssm_3_slice_distance)
			{
				pcf = EvaluatePCF3(pssm_3_projection_matrix, frag_viewpos);
				float	ramp_k = clamp((frag_viewpos.z - (pssm_3_slice_distance - 10.0)) / 10.0, 0.0, 1.0);
				pcf = pcf * (1.0 - ramp_k) + ramp_k;
			}

			if	(pcf > 0.0)
			{
				frag_viewpos = svc * (dtsg.w + view_depth_offset);

				// Normal in viewmodel space.
				vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

				// Light diffuse contribution.
				float	idiff = max(-dot(direction_view_space, normal), 0.0);
				
				// Screen space coordinates
				vec2	sscoords = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
				
				// Fetch pattern in SSCoords from pattern texture, tiling is slightly offseted by the depth buffer.
				float	pattern_freq = clamp(dtsg.w + 20.0, 10.0, 100.0);
				float	pattern = texture2D(noise_texture, sscoords * vec2(pattern_freq, pattern_freq)).r + 0.25;
				pattern = clamp(pattern, 0.0, 1.0);
				
				// Apply pattern to diffuse and contrast the result
				idiff = (idiff * pattern) * (1.0 - idiff) + (idiff + pattern) * idiff;				
				idiff = (clamp(idiff, 0.35, 0.65) - 0.35 ) * 2.5;
				
				// Light specular contribution.
				vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);
				float	ispec = pow(max(-dot(direction_view_space, normalize(e)), 0.0), pxl_spec_gloss.a * 96.0);

				// Full contribution.
				vec4	pxl_col_illum = texture2D(col_illum, UV);
				vec4	pxl_occ_diff = texture2D(occ_diff, UV);
				gl_FragColor = vec4(pxl_occ_diff.rgb * (pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff + pxl_spec_gloss.rgb * specular_color * ispec), 1.0) * pcf;
			}
			else	gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
		}
	">
>

<Shader =
	<Name = "core::spotlight_pattern_shadowmap">

	<Input = <Id = "#texture:pattern_hatching.tga, 1"> <Var = "noise_texture">>
	<Input = <Id = "@gbuffer:0"> <Var = "nrm_dpth">>
	<Input = <Id = "@gbuffer:1"> <Var = "col_illum">>
	<Input = <Id = "@gbuffer:2"> <Var = "spec_gloss">>
	<Input = <Id = "@gbuffer:3"> <Var = "occ_diff">>
	<Input = <Id = "@inverse_buffer_size"> <Var = "inverse_buffer_size">>


	<Vertex = "
		varying	vec3		frag_pos;
		void	main()
		{
			frag_pos = (gl_ModelViewMatrix * gl_Vertex).xyz;
			gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
		}
	">

	<Pixel = "
		uniform	vec2		inverse_buffer_size;
		uniform	vec2		inverse_projection_2d;
		uniform	vec2		display_buffer_ratio;
		uniform	float		view_depth_offset;

		uniform vec3		diffuse_color;
		uniform	vec3		specular_color;
		uniform	vec3		position_view_space;
		uniform	vec3		direction_view_space;

		uniform	float		range;
		uniform	float		spot_edge_angle;
		uniform	float		spot_cone_angle;

		uniform	sampler2D	nrm_dpth;
		uniform	sampler2D	col_illum;
		uniform	sampler2D	spec_gloss;
		uniform	sampler2D	occ_diff;
		uniform	sampler2D	light_view_depth_texture;
		uniform	sampler2D	noise_texture;

		uniform	mat4		view_to_light_matrix;
		uniform	mat4		light_projection_matrix;

		//---------------------------------------------
		float	ShadowTest(float light_z, float frag_z)
		{
			return (light_z > 1.001) ? ((light_z < (frag_z - 0.00025)) ? 0.0 : 1.0) : 1.0;
		}

		//-------------------------------------------------------------
		float	ShadowTestTapFilter(vec2 pj_biased, vec4 frag_lightpos)
		{
			float		a = ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.0, 0.0) / 1024.0).r, frag_lightpos.z),
						b = ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(1.0, 0.0) / 1024.0).r, frag_lightpos.z),
						c = ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(0.0, 1.0) / 1024.0).r, frag_lightpos.z),
						d = ShadowTest(texture2D(light_view_depth_texture, pj_biased + vec2(1.0, 1.0) / 1024.0).r, frag_lightpos.z);

			float		ku = fract(pj_biased.x * 1024.0),
						kv = fract(pj_biased.y * 1024.0);

			return (a * (1.0 - ku) + b * ku) * (1.0 - kv) + (c * (1.0 - ku) + d * ku) * kv; 
		}

		//------------------------------------------------------------------
		float	EvaluatePCF(mat4 light_projection_matrix, vec3 frag_viewpos)
		{
			vec4	frag_lightpos = light_projection_matrix * vec4(frag_viewpos, 1.0);
			vec2	pj_biased = ((frag_lightpos.xy / frag_lightpos.w) + 1.0) * 0.5;

			return	(
						ShadowTestTapFilter(pj_biased + vec2(1.0, 0.0) / 1024.0, frag_lightpos) +
						ShadowTestTapFilter(pj_biased + vec2(2.0, 1.5) / 1024.0, frag_lightpos) +
						ShadowTestTapFilter(pj_biased + vec2(0.0, 1.5) / 1024.0, frag_lightpos)
					) * 0.3333;
		}

		//------------
		void	main()
		{
			vec2	UV = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
			vec4	dtsg = texture2D(nrm_dpth, UV);

			// Unpack depth and compute fragment position in view space.
			vec3	svc = vec3((((UV * display_buffer_ratio) - vec2(0.5, 0.5)) * 2.0) * inverse_projection_2d, 1.0);
			vec3	frag_viewpos = svc * (dtsg.w + view_depth_offset);

			float	pcf = EvaluatePCF(light_projection_matrix, frag_viewpos);

			if	(pcf > 0.0)
			{
				// Normal in viewmodel space.
				vec3	normal = vec3(dtsg.x, dtsg.y, dtsg.z);

				// Light diffuse contribution.
				vec3	dt = frag_viewpos - position_view_space;
				float	dl = length(dt);
				dt = dt / dl;
				float	atten = range > 0.0 ? max(1.0 - dl / range, 0.0) : 1.0;
				float	idiff = max(-dot(dt, normal) * atten, 0.0);

				float	sdiff = dot(direction_view_space, dt);
				if	(sdiff < spot_cone_angle)
				{
					if	(sdiff < 0.0)
						sdiff = 0.0;
					else
						sdiff = max((sdiff - spot_edge_angle) / (spot_cone_angle - spot_edge_angle), 0.0);
				}
				else	sdiff = 1.0;
				
				// Screen space coordinates
				vec2	sscoords = vec2(gl_FragCoord.x, gl_FragCoord.y) * inverse_buffer_size;
				
				// Fetch pattern in SSCoords from pattern texture, tiling is slightly offseted by the depth buffer.
				float	pattern_freq = clamp(dtsg.w + 20.0, 10.0, 100.0);
				float	pattern = texture2D(noise_texture, sscoords * vec2(pattern_freq, pattern_freq)).r + 0.25;
				pattern = clamp(pattern, 0.0, 1.0);
				
				// Apply pattern to diffuse and contrast the result
				sdiff = (sdiff * pattern) * (1.0 - sdiff) + (sdiff + pattern) * sdiff;				
				sdiff = (clamp(sdiff, 0.5, 1.0) - 0.5) * 2.0;			

				// Light specular contribution.
				vec4	pxl_spec_gloss = texture2D(spec_gloss, UV);
				vec3	e = reflect(normalize(frag_viewpos), normal);
				float	ispec = pow(max(-dot(dt, normalize(e)) * atten * sdiff, 0.0), pxl_spec_gloss.a * 96.0);

				// Full contribution.
				vec4	pxl_col_illum = texture2D(col_illum, UV);
				vec4	pxl_occ_diff = texture2D(occ_diff, UV);
				gl_FragColor = vec4(pxl_col_illum.rgb * diffuse_color * pxl_occ_diff.a * idiff * sdiff + pxl_spec_gloss.rgb * specular_color * ispec, 1.0) * pcf;
			}
			else	gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
		}
	">
>